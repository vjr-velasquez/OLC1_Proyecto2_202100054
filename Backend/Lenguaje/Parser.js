/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,17],$V2=[1,22],$V3=[1,26],$V4=[1,30],$V5=[1,33],$V6=[1,34],$V7=[1,25],$V8=[1,31],$V9=[1,32],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[2,5,19,24,29,46,52,55,56,60,62,65,66,74,76,79,80,81,84,86,88,131,132,133,134,135],$Vm=[1,48],$Vn=[1,55],$Vo=[1,52],$Vp=[1,73],$Vq=[1,96],$Vr=[1,74],$Vs=[1,85],$Vt=[1,75],$Vu=[1,90],$Vv=[1,91],$Vw=[1,92],$Vx=[1,93],$Vy=[1,94],$Vz=[1,95],$VA=[1,66],$VB=[1,72],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[29,37,42,54],$VK=[28,31,42,43],$VL=[28,39,42,54,81,89,101],$VM=[28,39,42,54,81,89,100,101,103],$VN=[1,127],$VO=[28,39,42,54,81,89,100,101,103,105],$VP=[1,135],$VQ=[1,136],$VR=[28,39,42,54,70,71,72,73,81,89,100,101,103,105,109,110,112,113],$VS=[1,137],$VT=[1,138],$VU=[1,139],$VV=[28,39,42,54,70,71,72,73,81,89,100,101,103,105,109,110,112,113,115,116,117],$VW=[28,39,42,54,70,71,72,73,81,89,100,101,103,105,109,110,112,113,115,116,117,119],$VX=[1,159],$VY=[29,31],$VZ=[1,179],$V_=[1,183],$V$=[2,5,19,24,28,29,39,42,46,52,54,55,56,60,62,65,66,70,71,72,73,74,76,79,80,81,84,86,88,89,100,101,103,105,109,110,112,113,115,116,117,119,131,132,133,134,135],$V01=[42,54],$V11=[1,190],$V21=[1,221],$V31=[1,223],$V41=[39,42],$V51=[1,236],$V61=[1,235],$V71=[1,239],$V81=[1,243],$V91=[28,42],$Va1=[29,54],$Vb1=[28,31,39,42,54,70,71,72,73,81,89,100,101,103,105,109,110,112,113,115,116,117,119],$Vc1=[1,254],$Vd1=[2,29],$Ve1=[1,274],$Vf1=[62,86,88],$Vg1=[2,33],$Vh1=[1,317];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VECTOR":7,"DECLARACION":8,"OBJETOS":9,"ASIGNACION_VECTOR":10,"ASIGNACION":11,"FUNCIONES":12,"METODOS":13,"LLAMAR_METODOS":14,"LLAMAR_FUNCIONES":15,"IMPRIMIR":16,"CONDICIONAL_SI":17,"CICLO_PARA":18,"RETORNO":19,"INCREMENTO_INST":20,"MIENTRAS":21,"REPETIR":22,"SEGUN":23,"CONTINUAR":24,"TIPO":25,"VARLIST":26,"INIT_OPT":27,"TK_pyc":28,"TK_id":29,"DIMLIST":30,"TK_asign":31,"RW_vector":32,"TIPO_OPT":33,"VECTOR_INIT":34,"VECTOR_LIST":35,"VECTOR_LITERAL":36,"TK_corA":37,"LISTA_VALORES":38,"TK_corC":39,"LISTA_FILAS2D":40,"EXPRESION":41,"TK_coma":42,"RW_con":43,"RW_valor":44,"EXPRLIST":45,"RW_imprimir":46,"RW_nl":47,"INDICES":48,"INCREMENTO_EXPR":49,"TK_inc":50,"TK_dec":51,"RW_incrementar":52,"TK_parA":53,"TK_parC":54,"RW_decrementar":55,"RW_objeto":56,"ATRIBUTORS_OBJETO":57,"ATRIBUTO_OBJETO":58,"OBTENER_OBJETO":59,"RW_si":60,"BLOQUE":61,"RW_deLoContrario":62,"RW_o":63,"TK_llaA":64,"TK_llaC":65,"RW_para":66,"FOR_INIT":67,"FOR_COND":68,"FOR_UPD":69,"TK_menor":70,"TK_menorI":71,"TK_mayor":72,"TK_mayorI":73,"RW_funcion":74,"PARAMETROS":75,"RW_procedimiento":76,"PARAMETRO":77,"ARGUMENTOS":78,"RW_ejecutar":79,"RW_mientras":80,"RW_hacer":81,"RW_hasta":82,"RW_que":83,"RW_segun":84,"CASOS":85,"RW_fin":86,"CASO":87,"RW_enCasoDeSer":88,"RW_entonces":89,"CASTEOS":90,"PRIMITIVOS":91,"NATIVAS":92,"RW_minuscula":93,"RW_mayuscula":94,"RW_longitud":95,"RW_truncar":96,"RW_redondear":97,"EXPR_TERN":98,"EXPR_OR":99,"TK_q":100,"TK_colon":101,"EXPR_AND":102,"TK_or":103,"EXPR_NOT":104,"TK_and":105,"EXPR_COMP":106,"TK_not":107,"EXPR_SUM":108,"TK_igual":109,"TK_dif":110,"EXPR_MUL":111,"TK_suma":112,"TK_resta":113,"EXPR_POW":114,"TK_mult":115,"TK_div":116,"TK_mod":117,"EXPR_UNARY":118,"TK_pot":119,"EXPR_PRIMARY":120,"RW_tipo":121,"RW_verdadero":122,"RW_falso":123,"TK_string":124,"TK_char":125,"TK_double":126,"TK_integer":127,"ARITMETICOS":128,"RELACIONALES":129,"LOGICOS":130,"RW_char":131,"RW_cadena":132,"RW_entero":133,"RW_booleano":134,"RW_decimal":135,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"RETORNO",24:"CONTINUAR",28:"TK_pyc",29:"TK_id",31:"TK_asign",32:"RW_vector",37:"TK_corA",39:"TK_corC",42:"TK_coma",43:"RW_con",44:"RW_valor",46:"RW_imprimir",47:"RW_nl",50:"TK_inc",51:"TK_dec",52:"RW_incrementar",53:"TK_parA",54:"TK_parC",55:"RW_decrementar",56:"RW_objeto",60:"RW_si",62:"RW_deLoContrario",63:"RW_o",64:"TK_llaA",65:"TK_llaC",66:"RW_para",70:"TK_menor",71:"TK_menorI",72:"TK_mayor",73:"TK_mayorI",74:"RW_funcion",76:"RW_procedimiento",79:"RW_ejecutar",80:"RW_mientras",81:"RW_hacer",82:"RW_hasta",83:"RW_que",84:"RW_segun",86:"RW_fin",88:"RW_enCasoDeSer",89:"RW_entonces",93:"RW_minuscula",94:"RW_mayuscula",95:"RW_longitud",96:"RW_truncar",97:"RW_redondear",100:"TK_q",101:"TK_colon",103:"TK_or",105:"TK_and",107:"TK_not",109:"TK_igual",110:"TK_dif",112:"TK_suma",113:"TK_resta",115:"TK_mult",116:"TK_div",117:"TK_mod",119:"TK_pot",121:"RW_tipo",122:"RW_verdadero",123:"RW_falso",124:"TK_string",125:"TK_char",126:"TK_double",127:"TK_integer",131:"RW_char",132:"RW_cadena",133:"RW_entero",134:"RW_booleano",135:"RW_decimal"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,4],[7,8],[7,6],[7,8],[7,6],[36,3],[36,3],[30,2],[30,4],[33,0],[33,1],[34,3],[34,6],[35,3],[35,3],[38,1],[38,3],[40,7],[40,5],[26,1],[26,3],[27,0],[27,3],[27,2],[45,1],[45,3],[16,3],[16,4],[11,4],[10,5],[49,2],[49,2],[49,4],[49,4],[20,3],[20,3],[20,4],[20,4],[9,5],[57,2],[57,1],[58,2],[59,4],[17,5],[17,7],[17,13],[61,3],[18,9],[67,4],[67,3],[68,3],[68,3],[68,3],[68,3],[69,2],[69,2],[69,4],[69,4],[12,9],[12,8],[13,8],[13,7],[75,3],[75,1],[77,2],[77,2],[15,4],[15,3],[14,5],[14,4],[78,3],[78,1],[21,7],[22,9],[23,6],[85,2],[85,1],[87,4],[87,3],[90,4],[92,4],[92,4],[92,4],[92,4],[92,4],[41,1],[98,1],[98,5],[99,1],[99,3],[102,1],[102,3],[104,1],[104,2],[106,1],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[108,1],[108,3],[108,3],[111,1],[111,3],[111,3],[111,3],[114,1],[114,3],[118,1],[118,2],[118,2],[118,2],[118,4],[118,4],[48,3],[48,6],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,2],[120,4],[120,1],[120,1],[120,1],[120,3],[91,1],[91,1],[91,1],[91,1],[128,3],[128,3],[128,3],[128,3],[128,3],[128,3],[128,2],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[130,3],[130,3],[130,2],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2:
 return [] 
break;
case 3:
 
            if (Array.isArray($$[$0])) { $$[$0-1].push(...$$[$0]); } else { $$[$0-1].push($$[$0]); }
            this.$ = $$[$0-1]; 
        
break;
case 4:
 this.$ = Array.isArray($$[$0]) ? $$[$0] : [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22:
 this.$ = $$[$0] 
break;
case 23:
 errores.push(new Error(this._$.first_line, this._$.first_column + 1, TipoError.SINTACTICO, `No se esperaba «${yytext}»`)); this.$ = null; 
break;
case 24:

          const ids = $$[$0-2];
          const exprs = $$[$0-1] ? $$[$0-1].exprs : null;
          const out = [];
          if (!exprs) {
            for (const id of ids) out.push(new DeclaracionID(_$[$0-3].first_line, _$[$0-3].first_column, id, $$[$0-3], null));
          } else {
            const n = Math.min(ids.length, exprs.length);
            for (let i = 0; i < n; i++) out.push(new DeclaracionID(_$[$0-3].first_line, _$[$0-3].first_column, ids[i], $$[$0-3], exprs[i]));
            for (let i = n; i < ids.length; i++) out.push(new DeclaracionID(_$[$0-3].first_line, _$[$0-3].first_column, ids[i], $$[$0-3], null));
          }
          this.$ = out;
        
break;
case 25:

        var _tipo = $$[$0-2] ?? $$[$0-7];
        var _init = new VecInit('size', $$[$0-1].sizes, null);
        this.$ = new DeclaracionVector(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6], _tipo, $$[$0-5], _init);
      
break;
case 26:

        var _init = new VecInit('list', null, $$[$0-1].rows);
        this.$ = new DeclaracionVector(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-5], $$[$0-3], _init);
      
break;
case 27:

        var _tipo = $$[$0-2] ?? $$[$0-7];
        var _init = new VecInit('size', $$[$0-1].sizes, null);
        this.$ = new DeclaracionVector(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-5], _tipo, $$[$0-6], _init);
      
break;
case 28:

        var _init = new VecInit('list', null, $$[$0-1].rows);
        this.$ = new DeclaracionVector(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-5], $$[$0-4], _init);
      
break;
case 29:
 this.$ = new VectorLiteral(_$[$0-2].first_line, _$[$0-2].first_column, 1, $$[$0-1]); 
break;
case 30:
 this.$ = new VectorLiteral(_$[$0-2].first_line, _$[$0-2].first_column, 2, $$[$0-1]); 
break;
case 31:
 this.$ = 1; 
break;
case 32:
 this.$ = 2; 
break;
case 33: case 45:
 this.$ = null; 
break;
case 34:
 this.$ = $$[$0]; 
break;
case 35:
 this.$ = { sizes: [$$[$0-1]] }; 
break;
case 36:
 this.$ = { sizes: [$$[$0-4], $$[$0-1]] }; 
break;
case 37:
 this.$ = { rows: [ $$[$0-1] ] }; 
break;
case 38:
 this.$ = { rows: $$[$0-1] }; 
break;
case 39: case 43: case 48: case 64:
 this.$ = [$$[$0]]; 
break;
case 40: case 44: case 49:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 41:
 this.$ = [ $$[$0-5], $$[$0-1] ]; 
break;
case 42:
 $$[$0-4].push($$[$0-1]); this.$ = $$[$0-4]; 
break;
case 46: case 47:
 this.$ = { exprs: $$[$0] }; 
break;
case 50:
 this.$ = new Imprimir(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], undefined) 
break;
case 51:
 this.$ = new Imprimir(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nl') 
break;
case 52:
 this.$ = new Asignacion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1]) 
break;
case 53:
 this.$ = new AsignacionVector(_$[$0-4].first_line, _$[$0-4].first_column, new AccesoVector(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-3]), $$[$0-1]); 
break;
case 54:
 this.$ = new IncDec(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'inc', 'exp') 
break;
case 55:
 this.$ = new IncDec(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'dec', 'exp') 
break;
case 56:
 this.$ = new IncDec(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'inc', 'exp') 
break;
case 57:
 this.$ = new IncDec(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'dec', 'exp') 
break;
case 58:
 this.$ = new IncDec(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'inc','ins') 
break;
case 59:
 this.$ = new IncDec(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'dec','ins') 
break;
case 60:
 this.$ = new IncDec(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'inc','ins') 
break;
case 61:
 this.$ = new IncDec(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'dec','ins') 
break;
case 62:
 this.$ = new GuardarObjeto(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1]) 
break;
case 63:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 65:
 this.$ = new Atributo($$[$0-1], $$[$0], undefined) 
break;
case 66:
 this.$ = new AccesoObjeto(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2]) 
break;
case 67:
 this.$ = new Si(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0], null, null, null); 
break;
case 68:
 this.$ = new Si(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2], null, null, $$[$0]); 
break;
case 69:
 this.$ = new Si(_$[$0-12].first_line, _$[$0-12].first_column, $$[$0-10], $$[$0-8], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 70: case 153:
 this.$ = $$[$0-1]; 
break;
case 71:

          const id = $$[$0-6].id || $$[$0-4].id || $$[$0-2].id;
          const paso = $$[$0-2].dir || $$[$0-4].dir; // 'incremento' | 'decremento'
          this.$ = new Para(_$[$0-8].first_line, _$[$0-8].first_column, id, $$[$0-6].initExpr, $$[$0-4].expr, paso, $$[$0]);
        
break;
case 72: case 73:
 this.$ = { id: $$[$0-2], initExpr: $$[$0] }; 
break;
case 74:
 this.$ = { id: $$[$0-2], op: '<',  expr: $$[$0], dir: 'incremento' }; 
break;
case 75:
 this.$ = { id: $$[$0-2], op: '<=', expr: $$[$0], dir: 'incremento' }; 
break;
case 76:
 this.$ = { id: $$[$0-2], op: '>',  expr: $$[$0], dir: 'decremento' }; 
break;
case 77:
 this.$ = { id: $$[$0-2], op: '>=', expr: $$[$0], dir: 'decremento' }; 
break;
case 78: case 80:
 this.$ = { id: $$[$0-1], dir: 'incremento' }; 
break;
case 79: case 81:
 this.$ = { id: $$[$0-1], dir: 'decremento' }; 
break;
case 82:
this.$ = new Funcion(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1])
break;
case 83:
this.$ = new Funcion(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-6], [], $$[$0-1])
break;
case 84:
this.$ = new Metodo(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], undefined, $$[$0-4], $$[$0-1])
break;
case 85:
this.$ = new Metodo(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], undefined, [], $$[$0-1])
break;
case 86: case 94:
this.$.push($$[$0])
break;
case 87: case 95:
this.$ = [$$[$0]]  
break;
case 88:
 this.$ = new Parametro(_$[$0].first_line, _$[$0].first_column, $$[$0], $$[$0-1]); 
break;
case 89:
 this.$ = new Parametro(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]); 
break;
case 90:
this.$ = new LlamadaFUncion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1])
break;
case 91:
this.$ = new LlamadaFUncion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], [])
break;
case 92:
this.$ = new LlamadaMEtodo(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1])
break;
case 93:
this.$ = new LlamadaMEtodo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], [])
break;
case 96:
 this.$ = new Mientras(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]) 
break;
case 97:
 this.$ = new Repetir(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-1]) 
break;
case 98:
 this.$ = new Switch(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-2].cases, $$[$0-2].defaultCase) 
break;
case 99:
 
            if ($$[$0].isDefault) { this.$ = { cases: $$[$0-1].cases, defaultCase: $$[$0].instrucciones }; }
            else { this.$ = { cases: [...$$[$0-1].cases, $$[$0].case], defaultCase: $$[$0-1].defaultCase }; }
        
break;
case 100:

            if ($$[$0].isDefault) { this.$ = { cases: [], defaultCase: $$[$0].instrucciones }; }
            else { this.$ = { cases: [$$[$0].case], defaultCase: [] }; }
        
break;
case 101:
 
            this.$ = { case: new Case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]), isDefault: false }; 
        
break;
case 102:
 
            this.$ = { instrucciones: $$[$0], isDefault: true }; 
        
break;
case 103:
 this.$ = new Casteo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]) 
break;
case 104:
 this.$ = new Minuscula(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]) 
break;
case 105:
 this.$ = new Mayuscula(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]) 
break;
case 106:
 this.$ = new Longitud(_$[$0-3].first_line,  _$[$0-3].first_column, $$[$0-1]) 
break;
case 107:
 this.$ = new Truncar(_$[$0-3].first_line,   _$[$0-3].first_column, $$[$0-1]) 
break;
case 108:
 this.$ = new Redondear(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]) 
break;
case 111:
 this.$ = new Ternario(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 113: case 115:
 this.$ = new Logico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 117:
 this.$ = new Logico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0]); 
break;
case 119: case 120: case 121: case 122: case 123: case 124:
 this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 126: case 127: case 129: case 130: case 131: case 133:
 this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 135:
 this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0]); 
break;
case 136:
 this.$ = new IncDec(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'inc', 'exp'); 
break;
case 137:
 this.$ = new IncDec(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'dec', 'exp'); 
break;
case 138:
 this.$ = new IncDec(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'inc', 'exp'); 
break;
case 139:
 this.$ = new IncDec(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'dec', 'exp'); 
break;
case 140:
 this.$ = [$$[$0-1]]; 
break;
case 141:
 this.$ = [$$[$0-4], $$[$0-1]]; 
break;
case 148:
 this.$ = new AccesoVector(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]); 
break;
case 149:
 this.$ = new TipoD(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 150:
 this.$ = new AccesoID(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 151: case 152:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.BOOLEANO); 
break;
case 154:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CADENA  ) 
break;
case 155:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.CARACTER) 
break;
case 156:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.DECIMAL ) 
break;
case 157:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], Tipo.ENTERO  ) 
break;
case 158: case 159: case 160: case 161: case 162: case 163:
 this.$ = new Aritmetico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0]) 
break;
case 164:
 this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0]) 
break;
case 165: case 166: case 167: case 168: case 169: case 170:
 this.$ = new Relacional(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0]) 
break;
case 171: case 172:
 this.$ = new Logico(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0]) 
break;
case 173:
 this.$ = new Logico(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0]) 
break;
case 174:
 this.$ = Tipo.CARACTER 
break;
case 175:
 this.$ = Tipo.CADENA   
break;
case 176:
 this.$ = Tipo.ENTERO   
break;
case 177:
 this.$ = Tipo.BOOLEANO 
break;
case 178:
 this.$ = Tipo.DECIMAL  
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{1:[3]},{2:$V0,5:[1,43],6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{1:[2,2]},o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),{26:47,29:[1,45],30:46,37:$Vm},{29:[1,49]},{31:[1,51],37:$Vn,48:50,50:[1,53],51:[1,54],53:$Vo},{25:56,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{29:[1,57]},{29:[1,58]},{15:78,29:$Vp,36:81,37:$Vq,41:59,47:[1,60],52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{53:[1,97]},{53:[1,98]},{53:[1,99]},{53:[1,100]},{53:[1,101]},{64:[1,102]},{15:78,29:$Vp,36:81,37:$Vq,41:103,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VJ,[2,174]),o($VJ,[2,175]),o($VJ,[2,176]),o($VJ,[2,177]),o($VJ,[2,178]),{1:[2,1]},o($Vl,[2,3]),o($VK,[2,43],{30:104,37:$Vm}),{29:[1,105]},{27:106,28:[2,45],31:[1,109],42:[1,107],43:[1,108]},{39:[1,110]},{53:[1,111]},{31:[1,112]},{15:78,29:$Vp,36:81,37:$Vq,41:113,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:116,52:$Vr,53:$Vs,54:[1,115],55:$Vt,56:$Vu,59:79,78:114,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{28:[1,117]},{28:[1,118]},{15:78,29:$Vp,36:81,37:$Vq,41:119,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{29:[1,120]},{53:[1,121]},{53:[1,122]},{28:[1,123]},{15:78,29:$Vp,36:81,37:$Vq,41:124,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o([28,39,42,54,81,89],[2,109]),o($VL,[2,110],{100:[1,125],103:[1,126]}),o($VM,[2,112],{105:$VN}),o($VO,[2,114]),o($VO,[2,116]),{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,104:128,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VO,[2,118],{70:[1,133],71:[1,134],72:[1,131],73:[1,132],109:[1,129],110:[1,130],112:$VP,113:$VQ}),o($VR,[2,125],{115:$VS,116:$VT,117:$VU}),o($VV,[2,128]),o($VV,[2,132],{119:[1,140]}),o($VW,[2,134]),{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,113:$VB,118:141,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VW,[2,150],{48:144,37:$Vn,50:[1,142],51:[1,143],53:$Vo}),{53:[1,145]},{53:[1,146]},o($VW,[2,142]),o($VW,[2,143]),o($VW,[2,144]),o($VW,[2,145]),o($VW,[2,146]),o($VW,[2,147]),{53:[1,147]},o($VW,[2,151]),o($VW,[2,152]),{15:78,25:149,29:$Vp,36:81,37:$Vq,41:148,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($VW,[2,154]),o($VW,[2,155]),o($VW,[2,156]),o($VW,[2,157]),{29:[1,150]},{53:[1,151]},{53:[1,152]},{53:[1,153]},{53:[1,154]},{53:[1,155]},{15:78,29:$Vp,36:81,37:$VX,38:156,40:157,41:158,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:160,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{25:162,29:[1,163],67:161,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{29:[1,164]},{29:[1,165]},{15:78,29:$Vp,36:81,37:$Vq,41:166,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{2:$V0,4:167,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{81:[1,168]},{31:[1,169]},{31:[1,170]},{28:[1,171]},{29:[1,172]},{44:[1,173]},{15:78,29:$Vp,36:81,37:$Vq,41:175,45:174,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VY,[2,31],{37:[1,176]}),{29:$VZ,57:177,58:178},{15:78,29:$Vp,36:81,37:$Vq,41:180,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{28:[1,181]},{42:$V_,54:[1,182]},o($V$,[2,91]),o($V01,[2,95]),o($Vl,[2,58]),o($Vl,[2,59]),{39:[1,184]},{53:[1,185]},{25:189,29:$V11,54:[1,187],75:186,77:188,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{15:78,29:$Vp,36:81,37:$Vq,41:116,52:$Vr,53:$Vs,54:[1,192],55:$Vt,56:$Vu,59:79,78:191,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($Vl,[2,50]),{28:[1,193]},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:194,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,102:195,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,104:196,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VO,[2,117]),{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,108:197,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,108:198,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,108:199,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,108:200,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,108:201,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,108:202,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,111:203,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,111:204,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,113:$VB,114:205,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,113:$VB,114:206,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,113:$VB,114:207,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,113:$VB,114:208,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VW,[2,135]),o($VW,[2,136]),o($VW,[2,137]),o($VW,[2,148]),{29:[1,209]},{29:[1,210]},{15:78,29:$Vp,36:81,37:$Vq,41:211,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{54:[1,212]},{54:[1,213]},{53:[1,214]},{15:78,29:$Vp,36:81,37:$Vq,41:215,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:216,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:217,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:218,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:219,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{39:[1,220],42:$V21},{39:[1,222],42:$V31},o($V41,[2,39]),{15:78,29:$Vp,36:81,37:$VX,38:224,40:157,41:158,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{54:[1,225]},{28:[1,226]},{29:[1,227]},{31:[1,228]},{54:[1,229]},{54:[1,230]},{54:[1,231]},{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,232],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{62:$V51,85:233,87:234,88:$V61},{32:[1,237],35:238,37:$V71},{32:[1,240],35:241,37:$V71},o($Vl,[2,24]),o($VK,[2,44]),{15:78,29:$Vp,36:81,37:$Vq,41:175,45:242,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{28:[2,47],42:$V81},o($V91,[2,48]),{39:[1,244]},{29:$VZ,54:[1,245],58:246},o($Va1,[2,64]),{25:247,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{28:[1,248]},o($Vl,[2,52]),o($V$,[2,90]),{15:78,29:$Vp,36:81,37:$Vq,41:249,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($Vb1,[2,140],{37:[1,250]}),{25:189,29:$V11,54:[1,252],75:251,77:188,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{42:$Vc1,54:[1,253]},{64:[1,255]},o($V01,[2,87]),{29:[1,256]},{25:257,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{42:$V_,54:[1,258]},o($Vl,[2,93]),o($Vl,[2,51]),{101:[1,259]},o($VM,[2,113],{105:$VN}),o($VO,[2,115]),o($VO,[2,119],{112:$VP,113:$VQ}),o($VO,[2,120],{112:$VP,113:$VQ}),o($VO,[2,121],{112:$VP,113:$VQ}),o($VO,[2,122],{112:$VP,113:$VQ}),o($VO,[2,123],{112:$VP,113:$VQ}),o($VO,[2,124],{112:$VP,113:$VQ}),o($VR,[2,126],{115:$VS,116:$VT,117:$VU}),o($VR,[2,127],{115:$VS,116:$VT,117:$VU}),o($VV,[2,129]),o($VV,[2,130]),o($VV,[2,131]),o($VV,[2,133]),{54:[1,260]},{54:[1,261]},{54:[1,262]},o($VW,[2,153]),{91:263,124:$VF,125:$VG,126:$VH,127:$VI},{54:[1,264]},{54:[1,265]},{54:[1,266]},{54:[1,267]},{54:[1,268]},{54:[1,269]},o($VW,$Vd1),{15:78,29:$Vp,36:81,37:$Vq,41:270,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VW,[2,30]),{37:[1,271]},{39:[1,272],42:$V21},{61:273,64:$Ve1},{29:[1,276],68:275},{31:[1,277]},{15:78,29:$Vp,36:81,37:$Vq,41:278,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($Vl,[2,60]),o($Vl,[2,61]),{64:[1,279]},{82:[1,280]},{62:$V51,86:[1,281],87:282,88:$V61},o($Vf1,[2,100]),{15:78,29:$Vp,36:81,37:$Vq,41:283,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{89:[1,284]},{25:286,33:285,37:$Vg1,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{28:[1,287]},{15:78,29:$Vp,36:81,37:$VX,38:288,40:289,41:158,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{25:286,33:290,37:$Vg1,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{28:[1,291]},{28:[2,46],42:$V81},{15:78,29:$Vp,36:81,37:$Vq,41:292,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VY,[2,32]),o($Vl,[2,62]),o($Va1,[2,63]),o($Va1,[2,65]),o($Vl,[2,53]),o($V01,[2,94]),{15:78,29:$Vp,36:81,37:$Vq,41:293,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{42:$Vc1,54:[1,294]},{64:[1,295]},{64:[1,296]},{25:189,29:$V11,77:297,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{2:$V0,4:298,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($V01,[2,88]),o($V01,[2,89]),o($Vl,[2,92]),{15:78,29:$Vp,36:81,37:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:299,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($VW,[2,138]),o($VW,[2,139]),o($VW,[2,149]),o($VW,[2,103]),o($VW,[2,66]),o($VW,[2,104]),o($VW,[2,105]),o($VW,[2,106]),o($VW,[2,107]),o($VW,[2,108]),o($V41,[2,40]),{15:78,29:$Vp,36:81,37:$Vq,38:300,41:158,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o([39,70,71,72,73,100,103,105,109,110,112,113,115,116,117,119],$Vd1,{42:[1,301]}),o([2,5,19,24,29,46,52,55,56,60,65,66,74,76,79,80,81,84,86,88,131,132,133,134,135],[2,67],{63:[1,303]}),{2:$V0,4:304,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{28:[1,305]},{70:[1,306],71:[1,307],72:[1,308],73:[1,309]},{15:78,29:$Vp,36:81,37:$Vq,41:310,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{28:[2,73]},{2:$V0,4:311,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{83:[1,312]},{84:[1,313]},o($Vf1,[2,99]),{89:[1,314]},{2:$V0,4:315,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{34:316,37:$Vh1},{37:[2,34]},o($Vl,[2,26]),{39:[1,318],42:$V21},{39:[1,319],42:$V31},{34:320,37:$Vh1},o($Vl,[2,28]),o($V91,[2,49]),{39:[1,321]},{64:[1,322]},{2:$V0,4:323,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{2:$V0,4:324,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($V01,[2,86]),{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,325],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($VL,[2,111]),{39:[1,326],42:$V21},{37:[1,327]},{61:328,64:$Ve1},{60:[1,329]},{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,330],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{29:[1,332],52:[1,333],55:[1,334],69:331},{15:78,29:$Vp,36:81,37:$Vq,41:335,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:336,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:337,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{15:78,29:$Vp,36:81,37:$Vq,41:338,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{28:[2,72]},{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,339],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{53:[1,340]},o($Vl,[2,98]),{2:$V0,4:341,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($Vf1,[2,102],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,20:18,21:19,22:20,23:21,25:24,6:44,2:$V0,19:$V1,24:$V2,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk}),{28:[1,342]},{15:78,29:$Vp,36:81,37:$Vq,41:343,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{28:[2,37]},{28:[2,38]},{28:[1,344]},o($Vb1,[2,141]),{2:$V0,4:345,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,346],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,347],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($Vl,[2,85]),o($V41,[2,42]),{15:78,29:$Vp,36:81,37:$Vq,38:348,41:158,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($Vl,[2,68]),{53:[1,349]},o([2,5,19,24,29,46,52,55,56,60,62,63,65,66,74,76,79,80,81,84,86,88,131,132,133,134,135],[2,70]),{54:[1,350]},{50:[1,351],51:[1,352]},{53:[1,353]},{53:[1,354]},{28:[2,74]},{28:[2,75]},{28:[2,76]},{28:[2,77]},o($Vl,[2,96]),{15:78,29:$Vp,36:81,37:$Vq,41:355,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},o($Vf1,[2,101],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,20:18,21:19,22:20,23:21,25:24,6:44,2:$V0,19:$V1,24:$V2,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk}),o($Vl,[2,25]),{39:[1,356]},o($Vl,[2,27]),{2:$V0,6:44,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:18,21:19,22:20,23:21,24:$V2,25:24,29:$V3,46:$V4,52:$V5,55:$V6,56:$V7,60:$V8,65:[1,357],66:$V9,74:$Va,76:$Vb,79:$Vc,80:$Vd,81:$Ve,84:$Vf,131:$Vg,132:$Vh,133:$Vi,134:$Vj,135:$Vk},o($Vl,[2,83]),o($Vl,[2,84]),{39:[1,358],42:$V21},{15:78,29:$Vp,36:81,37:$Vq,41:359,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{61:360,64:$Ve1},{54:[2,78]},{54:[2,79]},{29:[1,361]},{29:[1,362]},{54:[1,363]},{28:[2,35],37:[1,364]},o($Vl,[2,82]),o($V41,[2,41]),{54:[1,365]},o($Vl,[2,71]),{54:[1,366]},{54:[1,367]},o($Vl,[2,97]),{15:78,29:$Vp,36:81,37:$Vq,41:368,52:$Vr,53:$Vs,55:$Vt,56:$Vu,59:79,90:76,91:77,92:80,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:61,99:62,102:63,104:64,106:65,107:$VA,108:67,111:68,113:$VB,114:69,118:70,120:71,121:$VC,122:$VD,123:$VE,124:$VF,125:$VG,126:$VH,127:$VI},{61:369,64:$Ve1},{54:[2,80]},{54:[2,81]},{39:[1,370]},{62:[1,371]},{28:[2,36]},{61:372,64:$Ve1},o($Vl,[2,69])],
defaultActions: {3:[2,2],43:[2,1],278:[2,73],286:[2,34],310:[2,72],318:[2,37],319:[2,38],335:[2,74],336:[2,75],337:[2,76],338:[2,77],351:[2,78],352:[2,79],366:[2,80],367:[2,81],370:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // JavaScript
    let { errores } = require ('../Clases/Utilidades/Salida')
    const { Error } = require ('../Clases/Utilidades/Error')
    const { TipoError } = require ('../Clases/Utilidades/TipoError')
    // Función para procesar secuencias de escape
    function procesarSecuenciasEscape(cadena) {
        return cadena.replace(/\\n/g, '\n')    // Salto de línea
                     .replace(/\\t/g, '\t')    // Tabulación
                     .replace(/\\"/g, '"')     // Comilla doble
                     .replace(/\\'/g, "'")     // Comilla simple
                     .replace(/\\\\/g, '\\');  // Barra invertida
    }

    // Tipos
    const { Tipo } = require ('../Clases/Utilidades/Tipo')

    // Instrucciones
    const { DeclaracionID } = require ('../Clases/Instrucciones/DeclaracionID')
    const { Asignacion }    = require ('../Clases/Instrucciones/Asignacion')
    const { Imprimir }      = require ('../Clases/Instrucciones/Imprimir')
    const { Si }            = require ('../Clases/Instrucciones/Si')
    const { Para }          = require ('../Clases/Instrucciones/Para')
    const { Continuar }     = require ('../Clases/Instrucciones/Continuar')
    const { Funcion }       = require ('../Clases/Instrucciones/Funcion')
    const { Metodo }        = require ('../Clases/Instrucciones/Metodo')
    const { LlamadaMEtodo } = require ('../Clases/Instrucciones/LlamadaMEtodo')
    const { GuardarObjeto } = require ('../Clases/Instrucciones/GuardarObjeto')
    const { Mientras }      = require ('../Clases/Instrucciones/Mientras')
    const { Repetir }       = require ('../Clases/Instrucciones/Repetir')
    const { Switch }        = require ('../Clases/Instrucciones/Switch')
    const { Case }          = require ('../Clases/Instrucciones/Case')

    // Vectores
    const { DeclaracionVector } = require ('../Clases/Instrucciones/DeclaracionVector')
    const { AsignacionVector }  = require ('../Clases/Instrucciones/AsignacionVector')

    // Expresiones
    const { Primitivo }     = require ('../Clases/Expresiones/Primitivo')
    const { AccesoID }      = require ('../Clases/Expresiones/AccesoID')
    const { IncDec }        = require ('../Clases/Expresiones/IncDec')
    const { Aritmetico }    = require ('../Clases/Expresiones/Aritmetico')
    const { Relacional }    = require ('../Clases/Expresiones/Relacional')
    const { Logico }        = require ('../Clases/Expresiones/Logico')
    const { Retornar }      = require ('../Clases/Expresiones/Retornar')
    const { Parametro }     = require ('../Clases/Expresiones/Parametro')
    const { LlamadaFUncion }= require ('../Clases/Expresiones/LlamadaFUncion')
    const { AccesoObjeto }  = require ('../Clases/Expresiones/AccesoObjeto')
    const { Atributo }      = require ('../Clases/Expresiones/Atributo')
    const { Casteo }        = require ('../Clases/Expresiones/Casteo')
    const { Minuscula }     = require ('../Clases/Expresiones/Minuscula')
    const { Mayuscula }     = require ('../Clases/Expresiones/Mayuscula')
    const { Longitud }      = require ('../Clases/Expresiones/Longitud')
    const { Truncar }       = require ('../Clases/Expresiones/Truncar')
    const { Redondear }     = require ('../Clases/Expresiones/Redondear')
    const { TipoD }         = require ('../Clases/Expresiones/TipoD')
    const { Ternario }      = require ('../Clases/Expresiones/Ternario')

    // Vector: acceso y literal
    const { AccesoVector }  = require ('../Clases/Expresiones/AccesoVector')
    const { VecInit }       = require ('../Clases/Utilidades/VectorInit')
    const { VectorLiteral } = require ('../Clases/Expresiones/VectorLiteral')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4: return 'RW_ingresar'      
break;
case 5: return 'RW_como'          
break;
case 6: return 43           
break;
case 7: return 44         
break;
case 8: return 46      
break;
case 9: return 122     
break;
case 10: return 123         
break;
case 11: return 86           
break;
case 12: return 63             
break;
case 13: return 60            
break;
case 14: return 62 
break;
case 15: return 66          
break;
case 16: return 82         
break;
case 17: return 'RW_incremento'    
break;
case 18: return 'RW_decremento'    
break;
case 19: return 81         
break;
case 20: return 89      
break;
case 21: return 'RW_retornar'      
break;
case 22: return 'RW_regresar'      
break;
case 23: return 'RW_continuar'     
break;
case 24: return 74       
break;
case 25: return 'RW_parametros'    
break;
case 26: return 56        
break;
case 27: return 76 
break;
case 28: return 79      
break;
case 29: return 52   
break;
case 30: return 55   
break;
case 31: return 80      
break;
case 32: return 47            
break;
case 33: return 'RW_repetir'       
break;
case 34: return 83           
break;
case 35: return 84         
break;
case 36: return 88   
break;
case 37: return 93     
break;
case 38: return 94     
break;
case 39: return 95      
break;
case 40: return 96       
break;
case 41: return 97     
break;
case 42: return 121          
break;
case 43: return 32        
break;
case 44: return 133   
break;
case 45: return 135  
break;
case 46: return 132   
break;
case 47: return 131     
break;
case 48: return 134 
break;
case 49: return 29       
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); yy_.yytext = procesarSecuenciasEscape(yy_.yytext); return 124 
break;
case 51: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); yy_.yytext = procesarSecuenciasEscape(yy_.yytext); return 125   
break;
case 52: return 126   
break;
case 53: return 127  
break;
case 54: return 109    
break;
case 55: return 110      
break;
case 56: return 73   
break;
case 57: return 71   
break;
case 58: return 72    
break;
case 59: return 70    
break;
case 60: return 105      
break;
case 61: return 103       
break;
case 62: return 107      
break;
case 63: return 50      
break;
case 64: return 51      
break;
case 65: return 112     
break;
case 66: return 113    
break;
case 67: return 115     
break;
case 68: return 116      
break;
case 69: return 117      
break;
case 70: return 119      
break;
case 71: return 31    
break;
case 72: return 64     
break;
case 73: return 65     
break;
case 74: return 53     
break;
case 75: return 54     
break;
case 76: return 37     
break;
case 77: return 39     
break;
case 78: return 42     
break;
case 79: return 28      
break;
case 80: return 100        
break;
case 81: return 101    
break;
case 82: errores.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TipoError.LEXICO, `Caracter no reconocido «${yy_.yytext}»`)); 
break;
case 83: return 5 
break;
}
},
rules: [/^(?:\n)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:([\s\r\t]+))/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con\b)/,/^(?:valor\b)/,/^(?:imprimir\b)/,/^(?:verdadero\b)/,/^(?:falso\b)/,/^(?:fin\b)/,/^(?:o\b)/,/^(?:si\b)/,/^(?:de lo contrario\b)/,/^(?:para\b)/,/^(?:hasta\b)/,/^(?:incremento\b)/,/^(?:decremento\b)/,/^(?:hacer\b)/,/^(?:entonces\b)/,/^(?:retornar\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:funcion\b)/,/^(?:parametros\b)/,/^(?:objeto\b)/,/^(?:procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:mientras\b)/,/^(?:nl\b)/,/^(?:repetir\b)/,/^(?:que\b)/,/^(?:segun\b)/,/^(?:en caso de ser\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:longitud\b)/,/^(?:truncar\b)/,/^(?:redondear\b)/,/^(?:tipo\b)/,/^(?:vector\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:cadena\b)/,/^(?:caracter\b)/,/^(?:booleano\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:("((([^\n\"\\]|\\.))*)"))/,/^(?:('((([^\n\"\\]|\\.))*)'))/,/^(?:([0-9]+\.[0-9]+\b))/,/^(?:([0-9]+\b))/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:;)/,/^(?:\?)/,/^(?::)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}